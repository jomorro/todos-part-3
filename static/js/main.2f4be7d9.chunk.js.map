{"version":3,"sources":["actions/index.js","components/TodoItem.jsx","components/TodoList.jsx","App.jsx","serviceWorker.js","reducers/index.js","index.js"],"names":["addTodo","text","type","markComplete","id","deleteTodo","clearCompleted","TodoItem","evt","_this","props","dispatch","react_default","a","createElement","Fragment","className","this","checked","onChange","value","onClick","React","Component","withRouter","connect","state","todos","TodoList","map","todo","i","components_TodoItem","key","title","completed","App","handleChange","e","setState","target","handleSubmit","preventDefault","length","document","getElementById","destroyAll","_this2","active","filter","notActive","onSubmit","placeholder","autoFocus","Switch","Route","exact","path","render","components_TodoList","Object","assign","Link","to","Boolean","window","location","hostname","match","initialState","store","createStore","arguments","undefined","action","objectSpread","toConsumableArray","concat","userId","item","_REDUX_DEVTOOLS_EXTENTION_","ReactDOM","BrowserRouter","es","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f4be7d9.chunk.js","sourcesContent":["export const ADD_TODO = \"ADD_TODO\";\nexport const MARK_COMPLETE = \"MARK_COMPLETE\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const CLEAR_COMPLETED = \"CLEAR_COMPLETED\";\nexport const ACTIVE = \"ACTIVE\";\n\nexport const addTodo = (text) => {\n    return {\n        type: ADD_TODO,\n        text\n    }\n};\n\nexport const markComplete = (id) => {\n    return {\n        type: MARK_COMPLETE,\n        id\n    }\n};\n\nexport const deleteTodo = (id) => {\n    return {\n        type: DELETE_TODO,\n        id\n    }\n};\n\nexport const clearCompleted = () => {\n    return {\n        type: CLEAR_COMPLETED,\n    }\n};","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { markComplete, deleteTodo } from \"../actions\";\n\nclass TodoItem extends React.Component {\n  markComplete = id => evt => {\n    this.props.dispatch(markComplete(id));\n  };\n\n  deleteTodo = id => () => {\n    this.props.dispatch(deleteTodo(id));\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <li id=\"list\" className={this.props.checked ? \"completed\" : \"\"}>\n          <div className=\"view\">\n            <input\n              className=\"toggle\"\n              type=\"checkbox\"\n              onChange={this.markComplete(this.props.id)}\n              checked={this.props.checked}\n            />\n\n            <label>{this.props.value}</label>\n            <button\n              className=\"destroy\"\n              onClick={this.deleteTodo(this.props.id)}\n            />\n          </div>\n        </li>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todos\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(TodoItem));\n","import React from \"react\";\nimport TodoItem from \"./TodoItem.jsx\";\n\nclass TodoList extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <ul className=\"todo-list\">\n          {this.props.todos.map((todo, i) => (\n            <TodoItem\n              key={todo.id}\n              id={todo.id}\n              value={todo.title}\n              checked={todo.completed}\n            />\n          ))}\n        </ul>\n      </React.Fragment>\n    );\n  }\n}\nexport default TodoList;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Link } from \"react-router-dom\";\nimport TodoList from \"./components/TodoList\";\nimport { withRouter, Route, Switch } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { addTodo, clearCompleted } from \"./actions\";\n\nclass App extends Component {\n  state = { text: \"\" };\n\n  handleChange = e => {\n    this.setState({\n      text: e.target.value\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    if (!this.state.text.length) {\n      return;\n    }\n    this.setState(() => ({\n      text: \"\"\n    }));\n    this.props.dispatch(addTodo(this.state.text));\n    document.getElementById(\"inputField\").value = \"\";\n  };\n\n  destroyAll = () => {\n    this.props.dispatch(clearCompleted());\n  };\n\n  render() {\n    let active = this.props.todos.filter(todo => !todo.completed);\n    let notActive = this.props.todos.filter(todo => todo.completed);\n    return (\n      <React.Fragment>\n        <section className=\"todoapp\">\n          <header className=\"header\">\n            <h1>todos</h1>\n            <form onSubmit={this.handleSubmit}>\n              <input\n                id=\"inputField\"\n                placeholder=\"What needs to be done?\"\n                className=\"new-todo\"\n                onChange={this.handleChange}\n                autoFocus\n              />\n            </form>\n          </header>\n\n          <section className=\"main\">\n            <Switch>\n              <Route\n                exact\n                path=\"/todos-part-3/home\"\n                render={props => (\n                  <TodoList {...props} todos={this.props.todos} />\n                )}\n              />\n              <Route\n                path=\"/todos-part-3/active\"\n                render={props => <TodoList {...props} todos={active} />}\n              />\n              <Route\n                path=\"/todos-part-3/completed\"\n                render={props => <TodoList {...props} todos={notActive} />}\n              />\n            </Switch>\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              <strong>{active.length}</strong> item(s) left\n            </span>\n            <ul className=\"filters\">\n              <li>\n                <Link to=\"/todos-part-3/home\"> All</Link>\n              </li>\n              <li>\n                <Link to=\"/todos-part-3/active\"> Active</Link>\n              </li>\n              <li>\n                <Link to=\"/todos-part-3/completed\"> Completed</Link>\n              </li>\n            </ul>\n            <button className=\"clear-completed\" onClick={this.destroyAll}>\n              Clear completed\n            </button>\n          </footer>\n        </section>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todos\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    ADD_TODO,\n    MARK_COMPLETE,\n    DELETE_TODO,\n    CLEAR_COMPLETED,\n    ACTIVE\n} from '../actions';\nimport todos from '../todos.json';\n\nconst initialState = {\n    todos\n};\n\nexport const reducers = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_TODO:\n            return {\n                ...state,\n                todos: [\n                    ...state.todos, {\n                        userId: 1,\n                        id: (state.todos.length + 1),\n                        title: action.text,\n                        completed: false\n                    }\n                ]\n            };\n        case MARK_COMPLETE:\n            return {\n                ...state,\n                todos: [\n                    ...state.todos.map(todo => todo.id === action.id ? {\n                        ...todo,\n                        completed: !todo.completed\n                    } : todo)\n                ]\n            };\n        case DELETE_TODO:\n            return {\n                ...state,\n                todos: [\n                    ...state.todos.filter(todo => todo.id !== action.id)\n                ]\n            };\n        case CLEAR_COMPLETED:\n            return {\n                ...state,\n                todos: [\n                    ...state.todos.filter(item => item.completed === false)\n                ]\n            };\n        case ACTIVE:\n            return {\n                ...state,\n                todos: [\n                    ...state.todos.filter(item => item.completed === false)\n                ]\n            };\n        default:\n            return state;\n    }\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { reducers } from \"./reducers\";\n\nconst store = createStore(\n  reducers,\n  window._REDUX_DEVTOOLS_EXTENTION_ && window._REDUX_DEVTOOLS_EXTENTION_()\n);\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}